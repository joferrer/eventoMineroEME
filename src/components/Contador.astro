---
const target = "2025-12-24T00:00:00";

// Formato corto en espaÃ±ol (para la meta)
const targetDateObj = new Date(target);
const targetFormatted = targetDateObj.toLocaleString("es-ES", {
  month: "long",
  day: "numeric",
  hour: "numeric",
  minute: "2-digit",
  hour12: true,
});
---

<style>
  .countdown {
    text-align: center;
    color: white;
    opacity: 0;
    transform: translateY(20px) scale(0.95);
    transition: all 0.6s ease-out;
  }
  .countdown.visible {
    opacity: 1;
    transform: translateY(0) scale(1);
  }

  .time {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-top: 1rem;
  }

  .box {
    background: rgba(255, 255, 255, 0.17);
    border-radius: 0.75rem;
    width: 120px;
    height: 120px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transition: transform 0.2s ease;
    animation: shadowPulse 5s infinite ease-in-out;
    text-align: center;
    white-space: nowrap;
  }
  @media (max-width: 550px) {
    .box {
      width: 80px;
      height: 80px;
      margin: 0.5rem 0;
    }
  }
  @media (max-width: 369px) {
    .box {
      width: 130px;
      height: 130px;
      margin: 0.1rem 0;
    }
    .time {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      justify-items: center;
    }
  }

  .number {
    font-weight: bold;
    font-size: 2rem;
    line-height: 1;
    animation: fadeIn 0.6s ease;
  }

  .label {
    font-size: 1rem;
    color: #ddd;
    margin-top: 0.3rem;
    letter-spacing: 1px;
  }

  .target-date,
  .today-date {
    margin-top: 1rem;
    font-size: 0.9rem;
    color: #eee;
    opacity: 0.9;
  }

  .box:hover {
    transform: scale(1.05);
    cursor: pointer;
  }

  @keyframes shadowPulse {
    0% {
      box-shadow:
        0 3px 12px rgba(255, 255, 255, 0.3),
        0 0 10px rgba(13, 110, 255, 0.6),
        0 0 6px rgba(255, 247, 95, 0.4);
    }
    50% {
      box-shadow:
        0 3px 16px rgba(255, 255, 255, 0.4),
        0 0 16px rgba(13, 110, 255, 0.7),
        0 0 9px rgba(28, 239, 255, 0.5);
    }
    100% {
      box-shadow:
        0 3px 12px rgba(255, 255, 255, 0.3),
        0 0 10px rgba(13, 110, 255, 0.6),
        0 0 6px rgba(255, 247, 95, 0.4);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
    100% {
      transform: scale(1);
    }
  }

  .pulse {
    animation: pulse 0.3s ease;
  }

  .final-bg {
    background: linear-gradient(-45deg, #ff9a9e, #fad0c4, #fbc2eb, #a18cd1);
    background-size: 400% 400%;
    animation: bgGradient 10s ease infinite;
    padding: 2rem;
    border-radius: 1rem;
  }

  @keyframes bgGradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }
</style>

<div>
  <div class="countdown" id="countdown">
    <div class="time">
      <div class="box">
        <div id="days" class="number">0</div>
        <div class="label">DÃ­as</div>
      </div>
      <div class="box">
        <div id="hours" class="number">0</div>
        <div class="label">Horas</div>
      </div>
      <div class="box">
        <div id="minutes" class="number">0</div>
        <div class="label">Minutos</div>
      </div>
      <div class="box">
        <div id="seconds" class="number">0</div>
        <div class="label">Segundos</div>
      </div>
    </div>
    <div class="target-date mb-6">ðŸŽ¯ Fecha objetivo: {targetFormatted}</div>
  </div>
</div>

<script
  src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.2/dist/confetti.browser.min.js"
></script>

<script define:vars={{ target }}>
  const targetDate = new Date(target).getTime();

  function launchConfetti() {
    const duration = 2000;
    const end = Date.now() + duration;

    (function frame() {
      confetti({ particleCount: 5, angle: 60, spread: 55, origin: { x: 0 } });
      confetti({ particleCount: 5, angle: 120, spread: 55, origin: { x: 1 } });
      if (Date.now() < end) requestAnimationFrame(frame);
    })();
  }

  function updateCountdown() {
    const now = new Date().getTime();
    const distance = targetDate - now;

    if (distance <= 0) {
      window.addEventListener("load", () => {
        launchConfetti();
      });
      document.querySelector(".countdown").innerHTML = document.querySelector(
        ".countdown"
      ).innerHTML = `
      <div class='final-bg mb-5'>
        <p class='text-center text-4xl font-extrabold mt-2 mb-4'
          style='animation: popIn 0.8s ease-out; font-size: 3rem;'>
          <span class="emoji">ðŸŽ‰</span>
          <span class="text-center text-4xl font-extrabold mt-2 mb-5 bg-gradient-to-r from-red-400 via-pink-500 to-red-500 bg-clip-text text-transparent" style="animation: popIn 0.8s ease-out; font-size: 3rem;">
          Â¡LlegÃ³ el DÃ­a!
          </span>
        </p>
      </div>
      `;
      launchConfetti();
      clearInterval(interval);
      return;
    }

    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
    const hours = Math.floor(
      (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)
    );
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

    setNumber("days", days);
    setNumber("hours", hours);
    setNumber("minutes", minutes);
    setNumber("seconds", seconds);
  }

  function setNumber(id, value) {
    const el = document.getElementById(id);
    if (el.textContent !== String(value)) {
      el.textContent = value;
      el.classList.remove("pulse");
      void el.offsetWidth;
      el.classList.add("pulse");
    }
  }

  // Intersection Observer para animar cuando aparece en pantalla
  const countdownElement = document.getElementById("countdown");
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          countdownElement.classList.add("visible");
        } else {
          countdownElement.classList.remove("visible");
        }
      });
    },
    { threshold: 0.3 }
  );
  observer.observe(countdownElement);

  updateCountdown();
  const interval = setInterval(updateCountdown, 1000);
</script>

<style>
  @keyframes popIn {
    0% {
      transform: scale(0.5) rotate(-10deg);
      opacity: 0;
    }
    60% {
      transform: scale(1.2) rotate(5deg);
      opacity: 1;
    }
    100% {
      transform: scale(1) rotate(0deg);
    }
  }
</style>
